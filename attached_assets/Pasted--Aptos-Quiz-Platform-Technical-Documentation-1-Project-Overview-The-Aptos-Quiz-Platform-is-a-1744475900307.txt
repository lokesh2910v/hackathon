# Aptos Quiz Platform - Technical Documentation

## 1. Project Overview
The Aptos Quiz Platform is a web application that allows users to:
- Take quizzes on blockchain topics
- Earn APT tokens for successful quiz completion
- Track quiz performance and token rewards
- Connect crypto wallets for reward collection

## 2. Technology Stack
- Frontend: React 18.3.1 with TypeScript
- Backend: Node.js with Express
- Database: PostgreSQL with Drizzle ORM
- Authentication: Session-based with Passport.js
- Blockchain: Aptos SDK
- UI Framework: Tailwind CSS with shadcn/ui components
- Build Tool: Vite

## 3. Project Structure

├── client/                 # Frontend React application
│   ├── src/
│   │   ├── components/    # Reusable UI components
│   │   ├── hooks/        # Custom React hooks
│   │   ├── lib/          # Utility functions
│   │   ├── pages/        # Page components
│   │   └── App.tsx       # Root component
├── server/                # Backend Express application
│   ├── aptos.ts          # Blockchain integration
│   ├── auth.ts           # Authentication logic
│   ├── db.ts             # Database configuration
│   ├── routes.ts         # API routes
│   └── storage.ts        # Data access layer
└── shared/               # Shared types and schemas
    └── schema.ts         # Database schema definitions


## 4. Database Schema

### Users Table
typescript
users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  email: text("email").notNull().unique(),
  password: text("password").notNull(),
  walletAddress: text("wallet_address"),
  balance: decimal("balance", { precision: 10, scale: 8 }).default("0"),
  createdAt: timestamp("created_at").defaultNow()
});


### Categories Table
typescript
categories = pgTable("categories", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  description: text("description").notNull(),
  color: text("color").notNull(),
  icon: text("icon").notNull()
});


### Quizzes Table
typescript
quizzes = pgTable("quizzes", {
  id: serial("id").primaryKey(),
  title: text("title").notNull(),
  description: text("description").notNull(),
  categoryId: integer("category_id").references(() => categories.id),
  difficulty: text("difficulty").notNull(),
  questionCount: integer("question_count").notNull(),
  reward: decimal("reward", { precision: 10, scale: 8 }).notNull()
});


### Questions Table
typescript
questions = pgTable("questions", {
  id: serial("id").primaryKey(),
  quizId: integer("quiz_id").references(() => quizzes.id),
  text: text("text").notNull(),
  options: text("options").array().notNull(),
  correctOption: integer("correct_option").notNull()
});


### Quiz Attempts Table
typescript
quizAttempts = pgTable("quiz_attempts", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").references(() => users.id),
  quizId: integer("quiz_id").references(() => quizzes.id),
  score: integer("score").notNull(),
  completedAt: timestamp("completed_at").defaultNow(),
  rewardClaimed: boolean("reward_claimed").default(false),
  rewardAmount: decimal("reward_amount", { precision: 10, scale: 8 }),
  transactionHash: text("transaction_hash")
});


## 5. Setup Instructions

1. Clone the repository from Replit
2. Install dependencies:
bash
npm install


3. Create .env file with required variables:

DATABASE_URL=postgresql://username:password@host:5432/database
SESSION_SECRET=your-session-secret
APTOS_PRIVATE_KEY=your-private-key


4. Initialize database:
bash
npm run db:push


5. Start development server:
bash
npm run dev


## 6. Authentication Flow

1. User Registration
- Validate username/email uniqueness
- Hash password using bcrypt
- Create user record
- Initialize session

2. User Login
- Validate credentials
- Create session
- Return user data

3. Session Management
- Express session with PostgreSQL store
- 24-hour session duration
- Secure session cookie settings

## 7. Quiz Flow

1. Quiz Selection
- Display available quizzes by category
- Show difficulty and reward amount
- Track completion status

2. Quiz Taking
- Present questions one at a time
- Record answers
- Calculate score
- Award tokens based on performance

3. Reward Collection
- Connect Aptos wallet
- Verify quiz completion
- Transfer APT tokens
- Update user balance

## 8. Security Practices

1. Password Security
- Bcrypt hashing
- Minimum length requirement
- Complexity validation

2. API Security
- Input validation
- Request rate limiting
- CSRF protection
- XSS prevention

3. Session Security
- Secure cookie settings
- Session expiration
- HTTPS only

## 9. Frontend Components

### Key Components
1. QuizCard: Displays quiz information
2. CategoryCard: Shows category details
3. WalletButton: Handles wallet connection
4. ActivityItem: Displays user activity

### Pages
1. HomePage: Dashboard with quizzes and stats
2. QuizPage: Interactive quiz interface
3. ResultsPage: Shows quiz results and rewards
4. AuthPage: Login/registration forms

## 10. API Routes

### Authentication
- POST /api/auth/register
- POST /api/auth/login
- GET /api/auth/logout

### Quizzes
- GET /api/quizzes
- GET /api/quizzes/:id
- POST /api/quizzes/:id/submit

### Categories
- GET /api/categories

### User
- GET /api/user
- PUT /api/user/wallet

### Quiz Attempts
- GET /api/quiz-attempts
- GET /api/quiz-attempts/:id

### Rewards
- POST /api/rewards/claim/:attemptId

## 11. Deployment

1. Set environment variables in Replit
2. Configure domain settings if needed
3. Use npm run build for production build
4. Application runs on port 5000

## 12. Error Handling

1. Client-side validation
2. Server-side validation
3. API error responses
4. Transaction error handling
5. Wallet connection errors

## 13. Performance Considerations

1. Database indexing
2. Query optimization
3. Client-side caching
4. Asset optimization
5. Rate limiting

## 14. Testing

1. Unit tests for components
2. API integration tests
3. End-to-end testing
4. Security testing
5. Performance testing